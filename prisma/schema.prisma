generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  name      String
  password  String
  photoUrl  String
  createdAt DateTime @default(now())
  
  // Game scores
  dartScores     DartScore[]
  puttingScores  PuttingScore[]
  
  // Beer pong relationships
  playerInTeam1  BeerPongMatch[] @relation("Team1")
  playerInTeam2  BeerPongMatch[] @relation("Team2")
  wonMatches     BeerPongMatch[] @relation("Winners")

  // Individual beer pong stats
  beerPongStats  BeerPongStats?

  // Photo moments
  photoMoments   PhotoMoment[]

  // MÃ¶lkky game relationships
  createdMolkkyGames MolkkyGame[] @relation("MolkkyCreator")
  wonMolkkyGames     MolkkyGame[] @relation("MolkkyWinner") 
  molkkyParticipation MolkkyPlayer[] @relation("MolkkyParticipant")

  // Grill Master scores
  grillScores    GrillScore[]

  // Mosquito Clicker scores
  mosquitoScores MosquitoScore[]

  // Memory Game scores
  memoryScores   MemoryScore[]

  // Kuvahaaste (Photo Challenge) relationships
  photoChallengesTook    PhotoChallenge[] @relation("ChallengeCreator")
  photoChallengeResponses PhotoChallengeResponse[] @relation("ResponseCreator")
}

model DartScore {
  id        String   @id @default(cuid())
  score     Int      // Out of 50
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model PuttingScore {
  id        String   @id @default(cuid())
  score     Int      // Out of 10
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model BeerPongMatch {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  status    String   @default("ongoing") // ongoing, completed
  
  // Teams (1-2 players per team)
  team1Players User[] @relation("Team1")
  team2Players User[] @relation("Team2")
  
  // Winners
  winners     User[] @relation("Winners")
  
  // Optional team names
  team1Name   String?
  team2Name   String?
}

model BeerPongStats {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  wins      Int      @default(0)
  losses    Int      @default(0)
  winStreak Int      @default(0)
  bestStreak Int     @default(0)
  lastUpdated DateTime @default(now())
}

model PhotoMoment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  photoUrl  String   // Cloudinary URL
  caption   String?  // Optional caption
  createdAt DateTime @default(now())
}

model MolkkyGame {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  startedAt   DateTime?
  endedAt     DateTime?
  status      String   @default("waiting") // waiting, ongoing, completed, cancelled
  creatorId   String
  creator     User     @relation("MolkkyCreator", fields: [creatorId], references: [id])
  winnerId    String?
  winner      User?    @relation("MolkkyWinner", fields: [winnerId], references: [id])
  
  players     MolkkyPlayer[]
  throws      MolkkyThrow[]
}

model MolkkyPlayer {
  id            String   @id @default(cuid())
  gameId        String
  game          MolkkyGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation("MolkkyParticipant", fields: [userId], references: [id])
  joinedAt      DateTime @default(now())
  currentScore  Int      @default(0)
  missCount     Int      @default(0) // Consecutive misses
  isEliminated  Boolean  @default(false)
  position      Int?     // Final position when game ends
  
  throws        MolkkyThrow[]
  
  @@unique([gameId, userId])
}

model MolkkyThrow {
  id        String   @id @default(cuid())
  gameId    String
  game      MolkkyGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  playerId  String
  player    MolkkyPlayer @relation(fields: [playerId], references: [id], onDelete: Cascade)
  throwNumber Int    // Turn number in the game
  pinsHit   Int      // Number of pins knocked down
  pinNumber Int?     // Specific pin number if only 1 pin hit
  points    Int      // Points scored this throw
  scoreBefore Int    // Score before this throw
  scoreAfter  Int    // Score after this throw
  isMiss    Boolean  @default(false)
  isPenalty Boolean  @default(false) // True if score was reset from exceeding 50
  createdAt DateTime @default(now())
}

model GrillScore {
  id        String   @id @default(cuid())
  score     Int      // Number of perfectly grilled sausages
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model MosquitoScore {
  id        String   @id @default(cuid())
  score     Int      // Number of mosquitoes swatted
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model MemoryScore {
  id        String   @id @default(cuid())
  score     Int      // Score based on moves and time
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model PhotoChallenge {
  id          String   @id @default(cuid())
  title       String   // Challenge description, e.g., "Find a red door"
  description String?  // Optional detailed description
  imageUrl    String   // URL of the challenge photo
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  
  // Creator relationship
  creatorId   String
  creator     User     @relation("ChallengeCreator", fields: [creatorId], references: [id])
  
  // Responses to this challenge
  responses   PhotoChallengeResponse[]
}

model PhotoChallengeResponse {
  id          String   @id @default(cuid())
  imageUrl    String   // URL of the response photo
  comment     String?  // Optional comment about where/how they found it
  createdAt   DateTime @default(now())
  isApproved  Boolean  @default(false) // Admin/creator can approve valid responses
  
  // Challenge relationship
  challengeId String
  challenge   PhotoChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  // Response creator relationship
  creatorId   String
  creator     User     @relation("ResponseCreator", fields: [creatorId], references: [id])
  
  // Prevent duplicate responses from same user to same challenge
  @@unique([challengeId, creatorId])
}